#!/usr/bin/env node

/* Sets up the environment variables from your .env file*/
require("dotenv").config();

/**
 * Module dependencies.
 */

const { app, sessionStore } = require("../app");
const http = require("http");
const db = require("../db");
const jwt = require("jsonwebtoken");
const cookieParser = require("cookie");
const onlineUsers = require("../constants/onlineUsers");
const socketMap = require("../constants/socketMap");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "3001");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces, and sync database.
 */

const io = require("socket.io")(server);

io.on("connection", (socket) => {
  const cookie = socket.handshake.headers.cookie || "";

  if (cookie) {
    const cookies = cookieParser.parse(cookie);
    const token = cookies["messenger-token"];
    jwt.verify(token, process.env.SESSION_SECRET, (err) => {
      if (!err) {
        socket.join("online-users");
      }
    });
  }

  socket.on("go-online", (id) => {
    if (!onlineUsers.hasOwnProperty(id)) {
      onlineUsers[id] = socket.id;
      socketMap[socket.id] = id;
    }
    // send the user who just went online to everyone else who is already online
    socket.to("online-users").emit("add-online-user", id);
  });

  socket.on("new-message", ({ message, sender, recipientId }) => {
    if (onlineUsers.hasOwnProperty(recipientId)) {
      const socketId = onlineUsers[recipientId];
      socket.to(socketId).emit("new-message", {
        message,
        sender,
      });
    }
  });

  socket.on("logout", () => removeOnlineUser(socket));
  socket.on("disconnect", () => removeOnlineUser(socket));
});

sessionStore
  .sync()
  .then(() => db.sync())
  .then(() => {
    server.listen(port);
    server.on("error", onError);
    server.on("listening", onListening);
  });

/**
 * Performs user clean-up on logout/exit
 */
function removeOnlineUser(socket) {
  const socketId = socket.id;
  const id = socketMap[socketId];
  if (onlineUsers.hasOwnProperty(id)) {
    socket.to("online-users").emit("remove-offline-user", id);
    delete onlineUsers[id];
    delete socketMap[socketId];
    socket.leave("online-users");
  }
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;

  console.log("Listening on " + bind);
}
